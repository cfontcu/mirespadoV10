CREATE OR REPLACE PACKAGE VD AS
    TYPE TABLENUMBER IS TABLE OF NUMBER;
    TYPE TABLANUMBER IS TABLE OF NUMBER;
    TYPE TABLECHAR IS TABLE OF VARCHAR2(1000);
    TYPE REGCHAR IS RECORD (VALOR VARCHAR2(1000));
    TYPE TABLAVARCHAR2 IS TABLE OF VARCHAR2(32767);
    TYPE REGVARCHAR2 IS RECORD (VAL VARCHAR2(32767));
    TYPE CURCHAR IS REF CURSOR RETURN REGCHAR;

    FUNCTION SWT_SI RETURN VARCHAR2 DETERMINISTIC;
    FUNCTION SWT_NO RETURN VARCHAR2 DETERMINISTIC;

    FUNCTION FECHASEC RETURN NUMBER;
    FUNCTION FECHASYS RETURN NUMBER;
    FUNCTION HORASYS RETURN VARCHAR2;
    FUNCTION HORASYS2 RETURN VARCHAR2;
    FUNCTION TRANSFECHA(FECHA VARCHAR2, FMTOENT VARCHAR2, FMTOSAL VARCHAR2) RETURN VARCHAR2;
    FUNCTION DATE2CHAR(FECHA DATE) RETURN VARCHAR2;
    FUNCTION CHAR2DATE(FECHA VARCHAR2) RETURN DATE;
    FUNCTION TIME2CHAR(FECHA TIMESTAMP) RETURN VARCHAR2;
    FUNCTION CHAR2TIME(FECHA VARCHAR2) RETURN TIMESTAMP;
    FUNCTION FECHAOK(FECHA VARCHAR2, FORMATO VARCHAR2) RETURN NUMBER;
    FUNCTION AYER(FECHA NUMBER, DIAS NUMBER) RETURN NUMBER;
    FUNCTION MANANA(FECHA NUMBER, DIAS NUMBER) RETURN NUMBER;

    FUNCTION PIECE(ORIGEN VARCHAR2, SEP VARCHAR2, PIEZA NUMBER) RETURN VARCHAR2;
    FUNCTION SUSTPIECE(CADENA VARCHAR2, NUMPIEZA NUMBER, NEWVALOR VARCHAR2) RETURN VARCHAR2;
    FUNCTION SIGPIECE(ORIGEN VARCHAR2, ACTUAL VARCHAR2, SEP VARCHAR2 := ',') RETURN VARCHAR2;
    FUNCTION ANTPIECE(ORIGEN VARCHAR2, ACTUAL VARCHAR2, SEP VARCHAR2 := ',') RETURN VARCHAR2;
    FUNCTION NUMPIECES(ORIGEN VARCHAR2, SEP VARCHAR2) RETURN NUMBER;
    FUNCTION DAMENUMPIECE(ORIGEN VARCHAR2, PIEZA VARCHAR2, SEPARADOR VARCHAR2 := ',') RETURN NUMBER;
    FUNCTION ELIMINAPIECE(ORIGEN VARCHAR2, PIEZA VARCHAR2, SEPARADOR VARCHAR2 := ',') RETURN VARCHAR2;
    FUNCTION PIECEATABLA(CADENAENTRADA VARCHAR2) RETURN TABLECHAR PIPELINED;
    FUNCTION TABLAAPIECE(MISELECT VARCHAR2) RETURN VARCHAR2;

    FUNCTION CONTIENECADEXT(CADENAIN VARCHAR2,
                            COMPARAR VARCHAR2,
                            SEPARADOR VARCHAR2 := ',',
                            SEPRANGO VARCHAR2 := '-',
                            ADMITENULO NUMBER := 1,
                            PORPOS NUMBER := 0) RETURN NUMBER;
    FUNCTION CONTIENECAD(CADENAIN VARCHAR2,
                         COMPARAR VARCHAR2,
                         SEPARADOR VARCHAR2 := ',',
                         SEPRANGO VARCHAR2 := '-',
                         ADMITENULO NUMBER := 1,
                         PORPOS NUMBER := 0) RETURN NUMBER;
    FUNCTION CONTIENENUMEXT(CADENAIN VARCHAR2,
                            COMPARAR NUMBER,
                            SEPARADOR VARCHAR2 := ',',
                            SEPRANGO VARCHAR2 := '-',
                            ADMITENULO NUMBER := 1,
                            PORPOS NUMBER := 0) RETURN NUMBER;
    FUNCTION CONTIENENUM(CADENAIN VARCHAR2,
                         COMPARAR NUMBER,
                         SEPARADOR VARCHAR2 := ',',
                         SEPRANGO VARCHAR2 := '-',
                         ADMITENULO NUMBER := 1,
                         PORPOS NUMBER := 0) RETURN NUMBER;
    FUNCTION CONTIENEEXT(CADENAIN VARCHAR2,
                         COMPARAR VARCHAR2,
                         SEPARADOR VARCHAR2 := ',',
                         SEPRANGO VARCHAR2 := '-',
                         ADMITENULO NUMBER := 1,
                         PORPOS NUMBER := 0) RETURN NUMBER;
    FUNCTION CONTIENE(CADENAIN VARCHAR2,
                      COMPARAR VARCHAR2,
                      SEPARADOR VARCHAR2 := ',',
                      SEPRANGO VARCHAR2 := '-',
                      ADMITENULO NUMBER := 1,
                      PORPOS NUMBER := 0) RETURN NUMBER;
    FUNCTION CONTIENERANGO(CADENAIN VARCHAR2,
                           COMPARAR VARCHAR2,
                           SEPARADOR VARCHAR2 := ',',
                           SEPRANGO VARCHAR2 := '-',
                           ADMITENULO NUMBER := 1,
                           PORPOS NUMBER := 0) RETURN NUMBER;
    FUNCTION BUSCACAD(PCAD VARCHAR2,
                      PBUSQ VARCHAR2) RETURN TABLANUMBER PIPELINED;
    FUNCTION BUSCAPATRON(PCAD VARCHAR2,
                         PPATRON VARCHAR2) RETURN TABLAVARCHAR2 PIPELINED;
    FUNCTION EXTRAECAD(PCADENAIN VARCHAR2,
                       PPIECEPOS VARCHAR2,
                       PADMITEINVPOS VARCHAR2 := SWT_SI) RETURN VARCHAR2;
    FUNCTION LEECAD(BUFFER IN OUT VARCHAR2, LON NUMBER) RETURN VARCHAR2;
    FUNCTION DIVIDEXBUSQUEDA(IT NUMBER, ORIGEN VARCHAR2, SEP VARCHAR2, LONG NUMBER, DUP NUMBER) RETURN VARCHAR2;
    FUNCTION DIVERRORRADIO(ERROR VARCHAR2, MAXCADENA NUMBER) RETURN VARCHAR2;
    FUNCTION ELIMINATILDES(ORIGEN VARCHAR2) RETURN VARCHAR2;
    FUNCTION ELIMINAESPACIOS(ORIGEN VARCHAR2) RETURN VARCHAR2;
    FUNCTION ELIMINAESPECIALES(ORIGEN VARCHAR2) RETURN VARCHAR2;

    FUNCTION ISNUMBER(CADENA VARCHAR2) RETURN NUMBER;
    FUNCTION ISVALOR(CADENA VARCHAR2, VALORES VARCHAR2) RETURN NUMBER;
    FUNCTION ESIGUAL(CAD1 VARCHAR2, CAD2 VARCHAR2) RETURN NUMBER;
    FUNCTION CUENTA(DESDE NUMBER, HASTA NUMBER) RETURN TABLENUMBER PIPELINED;
    FUNCTION ULTIMOS(MICADENA VARCHAR2, LON NUMBER) RETURN VARCHAR2;

    FUNCTION GETPROP(MIPROPIEDAD VARCHAR2,
                     MIINSTANCIA VARCHAR2 := 'GLOBAL',
                     HEREDA NUMBER := 1,
                     DEFECTO VARCHAR2 := NULL) RETURN VARCHAR2 DETERMINISTIC;
    FUNCTION GETPROPEX(MIPROPIEDAD VARCHAR2,
                       MIINSTANCIA VARCHAR2 := 'GLOBAL',
                       HEREDA NUMBER := 1,
                       DEFECTO VARCHAR2 := NULL) RETURN VARCHAR2;
    FUNCTION RESUELVECONF(MIVALOR VARCHAR2,
                          MIINSTANCIA VARCHAR2 := 'GLOBAL',
                          HEREDA NUMBER := 1) RETURN VARCHAR2;

    PROCEDURE DAMESID(MISID OUT NUMBER, MISERIAL OUT NUMBER, MITERMINAL OUT VARCHAR2);
    FUNCTION DAMETABLAROWID(MIROWID VARCHAR2) RETURN VARCHAR2;
    PROCEDURE COMMITCOND;
    PROCEDURE ROLLBACKCOND;
    PROCEDURE COMPILA;
END;
/

CREATE OR REPLACE PACKAGE BODY VD AS
    FUNCTION SWT_SI RETURN VARCHAR2 DETERMINISTIC IS
    BEGIN
        RETURN 'S';
    END SWT_SI;

    FUNCTION SWT_NO RETURN VARCHAR2 DETERMINISTIC IS
    BEGIN
        RETURN 'N';
    END SWT_NO;


    FUNCTION FECHASEC RETURN NUMBER AS
        RET NUMBER;
    BEGIN
        RET := FECHASYS + TO_CHAR(CURRENT_TIMESTAMP, 'SSSSSFF3') / 86400000;
        RETURN RET;
    END;

    FUNCTION FECHASYS RETURN NUMBER AS
        RET NUMBER;
    BEGIN
        RET := TO_CHAR(SYSDATE, 'J');
        RETURN RET;
    END;

    FUNCTION HORASYS RETURN VARCHAR2 AS
        RET VARCHAR2(8);
    BEGIN
        --Ã±apa nube. El sysdate depende del systimestamp
        --no he podido cambiarlo de ninguna de las formas.
        --solo el current_timestap. asÃ­ que cambio la horasys.
        --para que use
        --RET:=TO_CHAR(SYSDATE,'HH24:MI:SS');
        --pibe - 27032020
        RET := TO_CHAR(CURRENT_TIMESTAMP, 'HH24:MI:SS');
        RETURN RET;
    END;

    FUNCTION HORASYS2 RETURN VARCHAR2 AS
        RET VARCHAR2(12);
    BEGIN
        SELECT TO_CHAR(CURRENT_TIMESTAMP, 'HH24:MI:SS:FF3') INTO RET FROM DUAL;
        RETURN RET;
    END;

    FUNCTION TRANSFECHA(FECHA VARCHAR2, FMTOENT VARCHAR2, FMTOSAL VARCHAR2) RETURN VARCHAR2 AS
    BEGIN
        RETURN TO_CHAR(TO_DATE(FECHA, FMTOENT), FMTOSAL);
    END;

    FUNCTION DATE2CHAR(FECHA DATE) RETURN VARCHAR2 IS
    BEGIN
        RETURN TO_CHAR(FECHA, 'DD-MM-YYYY HH24:MI:SS');
    END;

    FUNCTION CHAR2DATE(FECHA VARCHAR2) RETURN DATE IS
    BEGIN
        RETURN TO_DATE(FECHA, 'DD-MM-YYYY HH24:MI:SS');
    END;

    FUNCTION TIME2CHAR(FECHA TIMESTAMP) RETURN VARCHAR2 IS
    BEGIN
        RETURN TO_CHAR(FECHA, 'DD-MM-YYYY HH24:MI:SS.FF');
    END;

    FUNCTION CHAR2TIME(FECHA VARCHAR2) RETURN TIMESTAMP IS
    BEGIN
        RETURN TO_TIMESTAMP(FECHA, 'DD-MM-YYYY HH24:MI:SS.FF');
    END;

    --
    -- FunciÃ³n que devuelve 0 cuando la fecha con el formato pasados es correcta, sino devuelve 1.
    -- FECHA: Fecha en formato char.
    -- FORMATO: Formato de la fecha, por ejemplo:YYYYMMDDD
    --
    FUNCTION FECHAOK(FECHA VARCHAR2, FORMATO VARCHAR2) RETURN NUMBER AS
        DUMMY DATE;
    BEGIN
        SELECT TO_DATE(FECHA, FORMATO)
        INTO DUMMY
        FROM DUAL;
        RETURN 0;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN 1;
    END;

    FUNCTION AYER(FECHA NUMBER, DIAS NUMBER) RETURN NUMBER AS
        RET NUMBER;
        DS NUMBER;
        DIA NUMBER;
    BEGIN
        RET := FECHA;
        IF RET = 0 THEN
            RET := FECHASYS;
        END IF;
        DIA := DIAS;
        IF (DIA >= 5) THEN
            RET := RET - FLOOR(DIA / 5) * 7;
            DIA := MOD(DIA, 5);
        END IF;
        DS := TO_CHAR(TO_DATE(RET, 'J'), 'D');
        RET := RET - DIA;
        IF (DIA >= DS) THEN
            RET := RET - 2;
        END IF;
        RETURN (RET);
    END;

    FUNCTION MANANA(FECHA NUMBER, DIAS NUMBER) RETURN NUMBER AS
        RET NUMBER;
        DS NUMBER;
        DIA NUMBER;
    BEGIN
        RET := FECHA;
        IF RET = 0 THEN
            RET := FECHASYS;
        END IF;
        DIA := DIAS;
        IF (DIA >= 5) THEN
            RET := RET + FLOOR(DIA / 5) * 7;
            DIA := MOD(DIA, 5);
        END IF;
        DS := TO_CHAR(TO_DATE(RET, 'J'), 'D');
        RET := RET + DIA;
        IF (DIA + DS > 5) THEN
            RET := RET + 2;
        END IF;
        RETURN (RET);
    END;


    FUNCTION PIECE(ORIGEN VARCHAR2, SEP VARCHAR2, PIEZA NUMBER) RETURN VARCHAR2 AS
        I NUMBER;
        RET VARCHAR2(2000);
    BEGIN
        I := 0;
        IF (PIEZA > 1) THEN
            I := INSTR(ORIGEN, SEP, 1, PIEZA - 1);
            IF (I = 0) THEN
                RETURN NULL;
            END IF;
        END IF;
        RET := SUBSTR(ORIGEN, I + 1);
        I := INSTR(RET, SEP, 1, 1);
        IF (I > 0) THEN
            RET := SUBSTR(RET, 1, I - 1);
        END IF;
        RETURN RET;
    END;

    FUNCTION SUSTPIECE(CADENA VARCHAR2, NUMPIEZA NUMBER, NEWVALOR VARCHAR2) RETURN VARCHAR2 IS
        RESULT VARCHAR2(255);
    BEGIN
        RESULT := '';
        FOR CONT IN 1..GREATEST(NUMPIEZA, NUMPIECES(CADENA, '#')) LOOP
            IF (CONT > 1) THEN
                RESULT := RESULT || '#';
            END IF;
            IF (NUMPIEZA <> CONT) THEN
                RESULT := RESULT || PIECE(CADENA, '#', CONT);
            ELSE
                RESULT := RESULT || NEWVALOR ;
            END IF;
        END LOOP;
        RETURN (RESULT);
    END;

    FUNCTION SIGPIECE(ORIGEN VARCHAR2, ACTUAL VARCHAR2, SEP VARCHAR2 := ',') RETURN VARCHAR2 IS
        NP NUMBER;
    BEGIN
        NP := NUMPIECES(ORIGEN, SEP);
        FOR I IN 1..NP LOOP
            IF ACTUAL = PIECE(ORIGEN, SEP, I) THEN
                IF I < NP THEN
                    RETURN PIECE(ORIGEN, SEP, I + 1);
                END IF;
            END IF;
        END LOOP;
        RETURN PIECE(ORIGEN, SEP, 1);
    END;

    FUNCTION ANTPIECE(ORIGEN VARCHAR2, ACTUAL VARCHAR2, SEP VARCHAR2 := ',') RETURN VARCHAR2 IS
        NP NUMBER;
    BEGIN
        NP := NUMPIECES(ORIGEN, SEP);
        FOR I IN 1..NP LOOP
            IF ACTUAL = PIECE(ORIGEN, SEP, I) THEN
                IF I > 1 THEN
                    RETURN PIECE(ORIGEN, SEP, I - 1);
                ELSE
                    EXIT;
                END IF;
            END IF;
        END LOOP;
        RETURN PIECE(ORIGEN, SEP, NP);
    END;

    FUNCTION NUMPIECES(ORIGEN VARCHAR2, SEP VARCHAR2) RETURN NUMBER AS
        I NUMBER;
        RET NUMBER;
    BEGIN
        IF ORIGEN IS NULL THEN RETURN (0); END IF;
        I := 0;
        RET := 1;
        LOOP
            I := INSTR(ORIGEN, SEP, I + 1);
            IF (I = 0) THEN
                EXIT;
            END IF;
            RET := RET + 1;
        END LOOP;
        RETURN RET;
    END;

    FUNCTION DAMENUMPIECE(ORIGEN VARCHAR2, PIEZA VARCHAR2, SEPARADOR VARCHAR2 := ',') RETURN NUMBER AS
        I NUMBER;
        N NUMBER;
        RET NUMBER;
        BUFF VARCHAR2(512);
    BEGIN
        N := NUMPIECES(ORIGEN, SEPARADOR);
        IF N < 1 THEN RETURN (-1); END IF;
        I := 1;
        FOR I IN 1 .. N LOOP
            BUFF := PIECE(ORIGEN, SEPARADOR, I);
            IF (BUFF = PIEZA) THEN
                RET := I;
                RETURN (RET);
            END IF;
        END LOOP;
        RETURN (-1);
    END;

    FUNCTION ELIMINAPIECE(ORIGEN VARCHAR2, PIEZA VARCHAR2, SEPARADOR VARCHAR2 := ',') RETURN VARCHAR2 AS
        CADENA VARCHAR2(2000);
    BEGIN
        CADENA := NULL;
        FOR I IN 1..VD.NUMPIECES(ORIGEN, SEPARADOR)
        LOOP
            IF I <> VD.DAMENUMPIECE(ORIGEN, PIEZA) THEN
                IF CADENA IS NULL THEN
                    CADENA := VD.PIECE(ORIGEN, SEPARADOR, I);
                ELSE
                    CADENA := CADENA || ',' || VD.PIECE(ORIGEN, SEPARADOR, I);
                END IF;
            END IF;
        END LOOP;
        RETURN (CADENA);
    END;

    FUNCTION PIECEATABLA(CADENAENTRADA VARCHAR2) RETURN TABLECHAR PIPELINED IS
        LON NUMBER;
    BEGIN
        LON := VD.NUMPIECES(CADENAENTRADA, ',');
        FOR I IN 1..LON LOOP
            PIPE ROW (VD.PIECE(CADENAENTRADA, ',', I));
        END LOOP;
    END PIECEATABLA;

    FUNCTION TABLAAPIECE(MISELECT VARCHAR2) RETURN VARCHAR2 IS
        RET VARCHAR2(1000);
        MICURCHAR SYS_REFCURSOR;
        I REGCHAR;
    BEGIN
        OPEN MICURCHAR FOR MISELECT;
        LOOP
            FETCH MICURCHAR INTO I;
            IF MICURCHAR%NOTFOUND THEN
                EXIT;
            END IF;
            IF RET IS NOT NULL THEN RET := RET || ','; END IF;
            RET := RET || I.VALOR;
        END LOOP;
        RETURN RET;
    END TABLAAPIECE;


    -- 4  VALOR EXACTO
    -- 3  LISTA DE VALORES EN PATRÃ“N
    -- 2 RANGO DE VALORES EN PATRÃ“N
    -- 1 VALOR NULO DEL PATRÃ“N
    -- 0 NO ENCONTRADO
    FUNCTION CONTIENECADEXT(CADENAIN VARCHAR2,
                            COMPARAR VARCHAR2,
                            SEPARADOR VARCHAR2 := ',',
                            SEPRANGO VARCHAR2 := '-',
                            ADMITENULO NUMBER := 1,
                            PORPOS NUMBER := 0) RETURN NUMBER IS
        RET NUMBER;
        VRET NUMBER := 4;
        PIEZA NUMBER;
        ANTVALOR NUMBER;
        VALOR VARCHAR2(200);
        NEGADO NUMBER := 0;
        POS NUMBER := 0;
    BEGIN
        IF CADENAIN IS NULL AND ADMITENULO = 1 THEN RETURN 1; END IF;
        PIEZA := 1;
        ANTVALOR := 1;
        IF (INSTR(CADENAIN, SEPARADOR) > 0) THEN
            VRET := 3;
        ELSIF (INSTR(CADENAIN, SEPRANGO) > 0) THEN
            VRET := 2;
        ELSE
            VRET := 4;
        END IF;
        WHILE TRUE LOOP
            POS := POS + 1;
            NEGADO := 0;
            RET := INSTR(CADENAIN, SEPARADOR, 1, PIEZA);
            IF RET = 0 THEN RET := LENGTH(CADENAIN) + 1; END IF;
            VALOR := SUBSTR(CADENAIN, ANTVALOR, RET - ANTVALOR);
            IF SUBSTR(VALOR, 1, 1) = '@' THEN NEGADO := 1; VALOR := SUBSTR(VALOR, 2); END IF;
            IF VALOR IS NULL THEN RETURN 0; END IF;
            PIEZA := PIEZA + 1;
            ANTVALOR := RET + 1;
            IF (COMPARAR LIKE VALOR AND NEGADO = 1) THEN
                RETURN 0;
            END IF;
            IF (COMPARAR LIKE VALOR AND NEGADO = 0) OR (COMPARAR IS NULL AND VALOR IS NULL) THEN
                IF PORPOS = 1 THEN RETURN POS; ELSE RETURN VRET; END IF;
            END IF;
            RET := INSTR(VALOR, SEPRANGO);
            IF RET > 0 THEN
                IF (COMPARAR >= SUBSTR(VALOR, 1, RET - 1) AND COMPARAR <= SUBSTR(VALOR, RET + 1) AND NEGADO = 0) OR
                   (COMPARAR < SUBSTR(VALOR, 1, RET - 1) AND COMPARAR > SUBSTR(VALOR, RET + 1) AND NEGADO = 1) THEN
                    IF PORPOS = 1 THEN RETURN POS; ELSE RETURN 2; END IF;
                END IF;
            END IF;
        END LOOP;
        RETURN 0;
    END CONTIENECADEXT;

    FUNCTION CONTIENECAD(CADENAIN VARCHAR2,
                         COMPARAR VARCHAR2,
                         SEPARADOR VARCHAR2 := ',',
                         SEPRANGO VARCHAR2 := '-',
                         ADMITENULO NUMBER := 1,
                         PORPOS NUMBER := 0) RETURN NUMBER IS
    BEGIN
        IF (CONTIENECADEXT(CADENAIN, COMPARAR, SEPARADOR, SEPRANGO, ADMITENULO, PORPOS) > 0) THEN
            RETURN 1;
        ELSE
            RETURN 0;
        END IF;
    END CONTIENECAD;

    -- 4  VALOR EXACTO
    -- 3  LISTA DE VALORES EN PATRÃ“N
    -- 2 RANGO DE VALORES EN PATRÃ“N
    -- 1 VALOR NULO DEL PATRÃ“N
    -- 0 NO ENCONTRADO
    FUNCTION CONTIENENUMEXT(CADENAIN VARCHAR2,
                            COMPARAR NUMBER,
                            SEPARADOR VARCHAR2 := ',',
                            SEPRANGO VARCHAR2 := '-',
                            ADMITENULO NUMBER := 1,
                            PORPOS NUMBER := 0) RETURN NUMBER IS
        RET NUMBER;
        VRET NUMBER := 1;
        PIEZA NUMBER;
        ANTVALOR NUMBER;
        VALOR VARCHAR2(200);
    BEGIN
        IF CADENAIN IS NULL AND ADMITENULO = 1 THEN
            RETURN 1;
        END IF;
        PIEZA := 1;
        ANTVALOR := 1;
        IF (INSTR(CADENAIN, SEPARADOR) > 0) THEN
            VRET := 3;
        ELSIF (INSTR(CADENAIN, SEPRANGO) > 0) THEN
            VRET := 2;
        ELSE
            VRET := 4;
        END IF;
        WHILE TRUE LOOP
            RET := INSTR(CADENAIN, SEPARADOR, 1, PIEZA);
            IF RET = 0 THEN RET := LENGTH(CADENAIN) + 1; END IF;
            VALOR := SUBSTR(CADENAIN, ANTVALOR, RET - ANTVALOR);
            IF VALOR IS NULL THEN RETURN 0; END IF;
            PIEZA := PIEZA + 1;
            ANTVALOR := RET + 1;
            BEGIN
                IF COMPARAR = VALOR THEN RETURN VRET; END IF;
            EXCEPTION
                WHEN OTHERS THEN NULL;
            END;
            RET := INSTR(VALOR, SEPRANGO);
            IF RET > 0 THEN
                BEGIN
                    IF COMPARAR >= SUBSTR(VALOR, 1, RET - 1) AND COMPARAR <= SUBSTR(VALOR, RET + 1) THEN
                        RETURN 2;
                    END IF;
                EXCEPTION
                    WHEN OTHERS THEN NULL;
                END;
            END IF;
        END LOOP;
        RETURN 0;
    END CONTIENENUMEXT;


    FUNCTION CONTIENENUM(CADENAIN VARCHAR2,
                         COMPARAR NUMBER,
                         SEPARADOR VARCHAR2 := ',',
                         SEPRANGO VARCHAR2 := '-',
                         ADMITENULO NUMBER := 1,
                         PORPOS NUMBER := 0) RETURN NUMBER IS
    BEGIN
        IF (CONTIENENUMEXT(CADENAIN, COMPARAR, SEPARADOR, SEPRANGO, ADMITENULO, PORPOS) > 0) THEN
            RETURN 1;
        ELSE
            RETURN 0;
        END IF;
    END CONTIENENUM;


    FUNCTION CONTIENEEXT(CADENAIN VARCHAR2,
                         COMPARAR VARCHAR2,
                         SEPARADOR VARCHAR2 := ',',
                         SEPRANGO VARCHAR2 := '-',
                         ADMITENULO NUMBER := 1,
                         PORPOS NUMBER := 0) RETURN NUMBER IS
        SUBNUMERO NUMBER;
    BEGIN
        RETURN VD.CONTIENECADEXT(CADENAIN, COMPARAR, SEPARADOR, SEPRANGO, ADMITENULO, PORPOS);
        BEGIN
            SUBNUMERO := TO_NUMBER(COMPARAR);
        EXCEPTION
            WHEN OTHERS THEN SUBNUMERO := NULL;
        END;
        IF SUBNUMERO IS NOT NULL THEN
            RETURN VD.CONTIENENUMEXT(CADENAIN, SUBNUMERO, SEPARADOR, SEPRANGO, ADMITENULO, PORPOS);
        ELSE
            RETURN VD.CONTIENECADEXT(CADENAIN, COMPARAR, SEPARADOR, SEPRANGO, ADMITENULO, PORPOS);
        END IF;
    END CONTIENEEXT;

    FUNCTION CONTIENE(CADENAIN VARCHAR2,
                      COMPARAR VARCHAR2,
                      SEPARADOR VARCHAR2 := ',',
                      SEPRANGO VARCHAR2 := '-',
                      ADMITENULO NUMBER := 1,
                      PORPOS NUMBER := 0) RETURN NUMBER IS
    BEGIN
        IF (CONTIENEEXT(CADENAIN, COMPARAR, SEPARADOR, SEPRANGO, ADMITENULO, PORPOS) > 0) THEN
            RETURN 1;
        ELSE
            RETURN 0;
        END IF;
    END CONTIENE;

    --CONTIENERAGO
    -- COMPARA SI ALGUN VALOR DE UNA CADENA, EXISTE EN OTRA CADENA
    -- EL PARÃMETRO COMPARAR PUEDE ADMITIR UN RANGO DE CADENAS SEPARADAS POR ',', Y SI ALGÃšN VALOR EXITE EN EL PRIMER PARÃMETRO
    -- "CADENAIN" DEVUELVE "1"
    FUNCTION CONTIENERANGO(CADENAIN VARCHAR2,
                           COMPARAR VARCHAR2,
                           SEPARADOR VARCHAR2 := ',',
                           SEPRANGO VARCHAR2 := '-',
                           ADMITENULO NUMBER := 1,
                           PORPOS NUMBER := 0) RETURN NUMBER IS
        MINUMPIEZAS NUMBER;
    BEGIN
        IF COMPARAR IS NULL THEN RETURN 1; END IF;
        MINUMPIEZAS := VD.NUMPIECES(COMPARAR, ',');
        FOR I IN 1..MINUMPIEZAS LOOP
            IF (CONTIENEEXT(CADENAIN, VD.PIECE(COMPARAR, ',', I), SEPARADOR, SEPRANGO, ADMITENULO, PORPOS) > 0) THEN
                RETURN 1;
            END IF;
        END LOOP;
        RETURN 0;
    END CONTIENERANGO;

    FUNCTION BUSCACAD(PCAD VARCHAR2,
                      PBUSQ VARCHAR2) RETURN TABLANUMBER PIPELINED IS
        MICADPOS INTEGER := 1;
    BEGIN
        MICADPOS := INSTR(PCAD, PBUSQ, MICADPOS);
        WHILE MICADPOS > 0 LOOP
            PIPE ROW (MICADPOS);
            MICADPOS := INSTR(PCAD, PBUSQ, MICADPOS + 1);
        END LOOP;
    END BUSCACAD;

    FUNCTION BUSCAPATRON(PCAD VARCHAR2,
                         PPATRON VARCHAR2) RETURN TABLAVARCHAR2 PIPELINED IS
        MICADPOS NUMBER := 1;
    BEGIN
        MICADPOS := REGEXP_INSTR(PCAD, PPATRON, MICADPOS);
        WHILE MICADPOS > 0 LOOP
            PIPE ROW (REGEXP_SUBSTR(PCAD, PPATRON, MICADPOS));
            MICADPOS := REGEXP_INSTR(PCAD, PPATRON, MICADPOS + 1);
        END LOOP;
    END BUSCAPATRON;

    FUNCTION EXTRAECAD(PCADENAIN VARCHAR2, PPIECEPOS VARCHAR2, PADMITEINVPOS VARCHAR2 := SWT_SI) RETURN VARCHAR2 IS
        MIPOS NUMBER;
        MIRES VARCHAR2(255 CHAR);
        MISEP VARCHAR2(1 CHAR) := ',';
    BEGIN
        FOR MIPIECEPOSIDX IN 1 .. VD.NUMPIECES(PPIECEPOS, MISEP) LOOP
            MIPOS := TO_NUMBER(VD.PIECE(PPIECEPOS, MISEP, MIPIECEPOSIDX));
            IF PADMITEINVPOS = SWT_NO AND (MIPOS < 1 OR MIPOS > LENGTH(PCADENAIN) OR TRUNC(MIPOS) <> MIPOS) THEN
                RETURN NULL;
            END IF;
            MIRES := MIRES || SUBSTR(PCADENAIN, MIPOS, 1);
        END LOOP;
        RETURN MIRES;
    END EXTRAECAD;

    FUNCTION LEECAD(BUFFER IN OUT VARCHAR2, LON NUMBER) RETURN VARCHAR2 IS
        RET VARCHAR2(1000);
    BEGIN
        RET := RTRIM(SUBSTR(BUFFER, 1, LON));
        BUFFER := SUBSTR(BUFFER, LON + 1);
        RETURN RET;
    END;

    FUNCTION DIVIDEXBUSQUEDA(IT NUMBER, ORIGEN VARCHAR2, SEP VARCHAR2, LONG NUMBER, DUP NUMBER) RETURN VARCHAR2 AS
        I NUMBER; J NUMBER;
        AUX VARCHAR2(2000); RET VARCHAR2(2000); RETAUX VARCHAR2(2000);
    BEGIN
        --En aux guardamos origen sin espacios duplicados si dup=0
        IF (DUP = 0) THEN
            AUX := ELIMINAESPACIOS(ORIGEN);
        ELSE
            AUX := ORIGEN;
        END IF;
        -- Guardas para agilizar la ejecuciÃ³n de la funciÃ³n*/
        IF (LENGTH(AUX) > LONG) AND (IT > 0) THEN
            RET := PIECE(AUX, SEP, 1);
            I := 0;
            J := 2;
            --Mientras nuestro iterador sea menor que la secuencia que nos piden
            WHILE (I < IT) LOOP
                RETAUX := PIECE(AUX, SEP, J);
                --Si concatenando no nos pasamos del tamaÃ±o de la lÃ­nea
                IF (LENGTH(RET) + LENGTH(RETAUX) + 1 <= LONG) THEN
                    RET := CONCAT(RET, SEP);
                    RET := CONCAT(RET, RETAUX);
                    --Si nos pasamos, dos posibilidades: todavÃ­a queda iteraciones
                ELSE
                    IF (I + 1 < IT) THEN
                        RET := PIECE(AUX, SEP, J);
                        I := I + 1;
                    ELSE--Nos salimos rÃ¡pido para agilizar la ejecuciÃ³n de la funciÃ³n*/
                        I := IT;
                    END IF;
                END IF;
                J := J + 1;
            END LOOP;
        ELSE
            IF (IT = 1) THEN
                RET := AUX;
            ELSE
                RET := NULL;
            END IF;
        END IF;
        RETURN RET;
    END;

    FUNCTION DIVERRORRADIO(ERROR VARCHAR2, MAXCADENA NUMBER) RETURN VARCHAR2 AS
        SALIDA VARCHAR2(4096);
        NUMCADENAS NUMBER;
        I NUMBER;
    BEGIN
        NUMCADENAS := CEIL(LENGTH(ERROR) / MAXCADENA) + 1;
        SALIDA := NULL;
        I := 1;
        WHILE (I <= NUMCADENAS) LOOP
            SALIDA := SALIDA || '\n' || VD.DIVIDEXBUSQUEDA(I, ERROR, ' ', MAXCADENA, 0);
            I := I + 1;
        END LOOP;
        RETURN (SALIDA);
    END;


    FUNCTION ELIMINATILDES(ORIGEN VARCHAR2) RETURN VARCHAR2 AS
        RET VARCHAR2(2000);
    BEGIN
        SELECT TRANSLATE(ORIGEN,
                         'Ã¡Ã©Ã­Ã³ÃºÃ Ã¨Ã¬Ã²Ã¹Ã£ÃµÃ¢ÃªÃ®Ã´Ã´Ã¤Ã«Ã¯Ã¶Ã¼Ã§ÃÃ‰ÃÃ“ÃšÃ€ÃˆÃŒÃ’Ã™ÃƒÃ•Ã‚ÃŠÃŽÃ”Ã›Ã„Ã‹ÃÃ–ÃœÃ‡',
                         'aeiouaeiouaoaeiooaeioucAEIOUAEIOUAOAEIOOAEIOUC')
        INTO RET
        FROM DUAL;
        RETURN (RET);
    END;

    FUNCTION ELIMINAESPACIOS(ORIGEN VARCHAR2) RETURN VARCHAR2 AS
        IT NUMBER; G NUMBER; GANT NUMBER;
        RET VARCHAR2(2000);
    BEGIN
        --Comenzamos eliminando los espacios a izquierda y derecha de la cadena
        RET := LTRIM(ORIGEN);
        RET := RTRIM(RET);
        GANT := INSTR(RET, ' ', 1, 1);
        IT := 2;
        --Iteramos hasta que no haya mas espacios contiguos que borrar
        WHILE(GANT > 0) LOOP
            --En G guardamos siempre la posiciÃ³n del espacio posterior al de Gant
            G := INSTR(RET, ' ', 1, IT);
            -- Si los espacios de G y Gant son contiguos, en el if borramos uno
            IF (GANT + 1 = G) THEN
                RET := CONCAT(SUBSTR(RET, 1, GANT),
                              SUBSTR(RET, G + 1, LENGTH(RET) - G));
            ELSE--Si no son contiguos, continuamos iterando*/
                IT := IT + 1;
                GANT := G;
            END IF;
        END LOOP;
        RETURN RET;
    END;

    FUNCTION ELIMINAESPECIALES(ORIGEN VARCHAR2) RETURN VARCHAR2 AS
        RET VARCHAR2(2000);
    BEGIN
        SELECT TRANSLATE(ORIGEN, 'ÂºÂªÂ°Â§',
                         '....')
        INTO RET
        FROM DUAL;

        SELECT TRANSLATE(RET, CHR(39), ' ')
        INTO RET
        FROM DUAL;

        RETURN (RET);
    END;


    -- Devuelve 0 si toda la cadena es numÃ©rica, sino devuelve 1.
    FUNCTION ISNUMBER(CADENA VARCHAR2) RETURN NUMBER AS
        N NUMBER := 1;
    BEGIN
        WHILE (N < LENGTH(CADENA)) LOOP
            IF SUBSTR(CADENA, N, 1) NOT IN ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9') THEN
                RETURN 1;
            END IF;
            N := N + 1;
        END LOOP;
        RETURN 0;
    END;

    -- Devuelve 0 si toda la cadena es alguno de los valores pasados en VALORES, sino devuelve 1.
    FUNCTION ISVALOR(CADENA VARCHAR2, VALORES VARCHAR2) RETURN NUMBER AS
        N NUMBER := 1;
        L NUMBER := 1;
        OK VARCHAR2(1);
    BEGIN
        WHILE (N < LENGTH(CADENA)) LOOP
            OK := SWT_NO;
            L := 1;
            WHILE (L < LENGTH(VALORES) AND OK = SWT_NO) LOOP
                IF SUBSTR(CADENA, N, 1) = SUBSTR(VALORES, L, 1) THEN
                    OK := SWT_SI;
                END IF;
                L := L + 1;
            END LOOP;
            IF OK = SWT_NO THEN
                RETURN 1;
            END IF;
            N := N + 1;
        END LOOP;
        RETURN 0;
    END;

    FUNCTION ESIGUAL(CAD1 VARCHAR2, CAD2 VARCHAR2) RETURN NUMBER IS
    BEGIN
        IF NVL(CAD1, ' ') = NVL(CAD2, ' ') THEN
            RETURN (1);
        ELSE
            RETURN 0;
        END IF;
    END ;

    FUNCTION CUENTA(DESDE NUMBER, HASTA NUMBER) RETURN TABLENUMBER PIPELINED IS
    BEGIN
        FOR I IN DESDE..HASTA LOOP
            PIPE ROW (I);
        END LOOP;
    END;

    FUNCTION ULTIMOS(MICADENA VARCHAR2, LON NUMBER) RETURN VARCHAR2 IS
    BEGIN
        RETURN SUBSTR(MICADENA, GREATEST(-LON, -LENGTH(MICADENA)));
    END;


    FUNCTION GETPROP(MIPROPIEDAD VARCHAR2,
                     MIINSTANCIA VARCHAR2 := 'GLOBAL',
                     HEREDA NUMBER := 1,
                     DEFECTO VARCHAR2 := NULL) RETURN VARCHAR2 IS
        RET VDCONFI.VALOR%TYPE;
    BEGIN
        SELECT VALOR
        INTO RET
        FROM VDCONFI
        WHERE PROPIEDAD = MIPROPIEDAD AND INSTANCIA = MIINSTANCIA AND ACTIVO = SWT_SI;
        RETURN RET;
    EXCEPTION
        WHEN OTHERS THEN IF MIINSTANCIA != 'GLOBAL' AND HEREDA = 1 THEN
            RETURN GETPROP(MIPROPIEDAD, 'GLOBAL', 0, DEFECTO);
        ELSE
            RETURN DEFECTO;
        END IF;
    END;

    FUNCTION GETPROPEX(MIPROPIEDAD VARCHAR2,
                       MIINSTANCIA VARCHAR2 := 'GLOBAL',
                       HEREDA NUMBER := 1,
                       DEFECTO VARCHAR2 := NULL) RETURN VARCHAR2 IS
        RET VDCONFI.VALOR%TYPE;
        SUB VDCONFI.VALOR%TYPE;
        VALOR VDCONFI.VALOR%TYPE;
    BEGIN
        RET := GETPROP(MIPROPIEDAD, MIINSTANCIA, HEREDA, DEFECTO);
        WHILE TRUE LOOP
            SUB := REGEXP_SUBSTR(RET, '\$\([^\)]+\)');
            IF SUB IS NULL THEN
                EXIT;
            END IF;
            VALOR := GETPROPEX(SUBSTR(SUB, 3, LENGTH(SUB) - 3), MIINSTANCIA, HEREDA);
            RET := REPLACE(RET, SUB, VALOR);
        END LOOP;
        RETURN RET;
    END;

    FUNCTION RESUELVECONF(MIVALOR VARCHAR2,
                          MIINSTANCIA VARCHAR2 := 'GLOBAL',
                          HEREDA NUMBER := 1) RETURN VARCHAR2 IS
        RET VARCHAR2(4000);
        SUB VDCONFI.VALOR%TYPE;
        VALOR VDCONFI.VALOR%TYPE;
    BEGIN
        RET := MIVALOR;
        WHILE TRUE LOOP
            SUB := REGEXP_SUBSTR(RET, '\$\([^\)]+\)');
            IF SUB IS NULL THEN
                EXIT;
            END IF;
            VALOR := GETPROPEX(SUBSTR(SUB, 3, LENGTH(SUB) - 3), MIINSTANCIA, HEREDA);
            RET := REPLACE(RET, SUB, VALOR);
        END LOOP;
        RETURN RET;
    END;


    PROCEDURE DAMESID(MISID OUT NUMBER, MISERIAL OUT NUMBER, MITERMINAL OUT VARCHAR2) IS
    BEGIN
        SELECT SID, SERIAL#, TERMINAL
        INTO MISID,MISERIAL,MITERMINAL
        FROM SYS.V_$SESSION
        WHERE AUDSID = USERENV('SESSIONID');
    END;

    FUNCTION DAMETABLAROWID(MIROWID VARCHAR2) RETURN VARCHAR2 AS
        ROWID_TYPE NUMBER;
        OBJECT_NUMBER NUMBER;
        RELATIVE_FNO NUMBER;
        BLOCK_NUMBER NUMBER;
        ROW_NUMBER NUMBER;
        TABLA VARCHAR2(100);
    BEGIN
        DBMS_ROWID.ROWID_INFO(MIROWID, ROWID_TYPE, OBJECT_NUMBER, RELATIVE_FNO, BLOCK_NUMBER, ROW_NUMBER);
        SELECT OBJECT_NAME INTO TABLA FROM USER_OBJECTS WHERE DATA_OBJECT_ID = OBJECT_NUMBER;
        RETURN TABLA;
    EXCEPTION
        WHEN OTHERS THEN RETURN NULL;
    END;

    PROCEDURE COMMITCOND IS
    BEGIN
        IF DBMS_TRANSACTION.STEP_ID IS NULL THEN
            RETURN;
        END IF;
        COMMIT;
    END;

    PROCEDURE ROLLBACKCOND IS
    BEGIN
        IF DBMS_TRANSACTION.STEP_ID IS NULL THEN
            RETURN;
        END IF;
        ROLLBACK;
    END;

    /*COMPILAR TODOS LOS PACKAGE BODY DEL USUARIO*/
    PROCEDURE COMPILA IS
        CURSOR C1 IS
            SELECT DECODE(OBJECT_TYPE, 'SYNONYM', 'DESC ', 'alter ')
                       || DECODE(OBJECT_TYPE, 'PACKAGE BODY', 'PACKAGE', 'SYNONYM', '', OBJECT_TYPE) || ' ' || OWNER ||
                   '.' || OBJECT_NAME || ' '
                       || DECODE(OBJECT_TYPE, 'PACKAGE BODY', 'COMPILE BODY', 'SYNONYM', '', 'COMPILE') COMANDO
            FROM ALL_OBJECTS
            WHERE STATUS = 'INVALID'
              AND OBJECT_TYPE <> 'PACKAGE'
              AND OWNER = USER
            ORDER BY OWNER, OBJECT_TYPE, OBJECT_NAME;
    BEGIN
        FOR I IN C1 LOOP
            BEGIN
                EXECUTE IMMEDIATE I.COMANDO;
            EXCEPTION
                WHEN OTHERS THEN NULL;
            END;
        END LOOP;
    END COMPILA;
END;

